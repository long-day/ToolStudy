package com.longday.toolstudy.otherTools.designPatterns.principles;

/**
 * @author 君
 * @version 1.0
 * @date 2022/9/4
 */
public class DependenceInversionTest {
    //依赖倒置原则(Dependence Inversion Principle)
/*
    1、高层模块不应该依赖底层模块,二者都应该依赖抽象.
　　2、抽象不应该依赖细节,细节应该依赖抽象.
　　3、依赖倒置的中心思想是面向接口编程.
　　4、依赖倒置原则是基于这样的设计理念：相对于细节的多变性,抽象的东西要稳定的多.以抽象为基础搭建的架构比以细节为基础
      搭建的架构要稳定的多.
　　5、使用接口或抽象类的目的是指定好规范,而不涉及任何具体的操作,把展现细节的任务交给他们的实现类来完成.
*/

// 示例

    
// 总结一下
/*
    1、每个类尽量都有接口或者抽象类,或者抽象类和接口两都具备.
　　2、变量的表面类型尽量是接口或者抽象类.
　　3、任何类都不应该从具体类派生.
　　4、尽量不要覆写基类的方法.
　　5、如果基类是一个抽象类,而这个方法已经实现了,子类尽量不要覆写.类间依赖的是抽象,覆写了抽象方法,
      对依赖的稳定性会有一定的影响.
　　6、结合里氏替换原则使用.
*/    
}
