package com.longday.toolstudy.otherTools.designPatterns.principles;

/**
 * @author 君
 * @version 1.0
 * @date 2022/9/4
 */
public class LiskovSubstitutionTest {
// 里式替换原则(LSP)：任何基类可以出现的地方，子类一定可以出现
/*
    里氏替换至少包含以下两个含义:
        1.  针对继承而言,为了实现代码重用(即:共享方法),那么共享的父类方法就应该保持不变,不能被子类重新定义,
            子类只能通过新添加方法来扩展功能，父类和子类都可以实例化，而子类继承的方法和父类是一样的，父类调用方法的地方,
            子类也可以调用同一个继承得来的，逻辑和父类一致的方法，这时用子类对象将父类对象替换掉.
        2.  针对多态,为了符合LSP,我们应该将父类定义为抽象类,并定义抽象方法,让子类重新定义这些方法,
            当父类是一个抽象类时,父类就是不能实例化,所以也不存在可实例化的父类对象在程序里.
            也就不存在子类替换父类实例（根本不存在父类实例了）时逻辑不一致的可能
*/
    //示例
// 此原则较为容易理解,就不进行示例了
}
